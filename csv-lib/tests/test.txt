// Imports
use csv::Reader;
use std::path::Path;

// struct definition
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Test{
	id: i32,
	column_1: String,
	feat: i32,
	done: bool,
}

// Implement struct coersion from raw data strings
impl From<Vec<String>> for Test{
	fn from(value: Vec<String>) -> Self {
		Self{
			id: value[0].parse().expect(&format!("Could not parse '{}' for 'id'!", value[0])),
			column_1: value[1].parse().expect(&format!("Could not parse '{}' for 'column_1'!", value[1])),
			feat: value[2].parse().expect(&format!("Could not parse '{}' for 'feat'!", value[2])),
			done: value[3].parse().expect(&format!("Could not parse '{}' for 'done'!", value[3])),
		}
	}
}

// Initial functions
pub fn init(source: impl AsRef<Path>) -> Result<Vec<Test>, Box<dyn std::error::Error>> {
    let mut reader = Reader::from_path(source.as_ref())?;
    let mut res: Vec<Test> = vec![];
    for iter in reader.records() {
        match iter {
            Ok(data) => {
                let tmp: Vec<String> = data.into_iter().map(|s| s.trim().to_owned()).collect();
                res.push(Test::from(tmp));
            }
            Err(e) => {
                return Err(Box::new(e));
            }
        }
    }

    Ok(res)
}
